<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.childprj.repository.CommunityRepository">

    <insert id="save" flushCache="true" parameterType="com.project.childprj.domain.community.Post"
            useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO post
            (title, content, userId)
        VALUES
            (#{title}, #{content}, #{user.id})
    </insert>

    <select id="findUserImage" resultType="com.project.childprj.domain.mypage.UserImage">
        SELECT
            id "id"
            , sourceName "sourceName"
            , fileName "fileName"
            , userId "userId"
        FROM user_img
        WHERE userId = #{userId}
    </select>

    <insert id="addRecommend" flushCache="true">
        INSERT INTO recommend
            (userId, postId)
        VALUES
            (#{userId}, #{postId})
    </insert>

    <select id="findRecommendCnt" resultType="int">
        SELECT count(*) FROM recommend
        WHERE postId = #{postId}
    </select>

    <update id="incViewCnt" flushCache="true">
        UPDATE post
        SET viewCnt = viewCnt + 1
        WHERE id = #{id}
    </update>

    <!-- 반복해서 사용될 쿼리문은 sql 태그로 정의 하고, include 태그로 가져다 쓸수 있다 -->
    <sql id="SELECT_BASE">
        SELECT
        p.id "p_id",
        p.title "p_title",
        p.content "p_content",
        p.viewCnt "p_viewCnt",
        p.createDate "p_createDate",
        u.id "u_id",
        u.loginId "u_loginId",
        u.nickName "u_nickName",
        u.name "u_name",
        u.email "u_email",
        u.createDate "u_createDate"
        FROM
        post p, user u
        WHERE
        p.userId = u.id
    </sql>

    <resultMap id="mapUser" type="com.project.childprj.domain.user.User">
        <result column="u_id" property="id"/>
        <result column="u_loginId" property="loginId"/>
        <result column="u_nickName" property="nickName"/>
        <result column="u_name" property="name"/>
        <result column="u_email" property="email"/>
        <result column="u_createDate" property="createDate"/>
    </resultMap>

    <resultMap id="mapPost" type="com.project.childprj.domain.community.Post">
        <result column="p_id" property="id"/>
        <result column="p_title" property="title"/>
        <result column="p_content" property="content"/>
        <result column="p_viewCnt" property="viewCnt"/>
        <result column="p_createDate" property="createDate"/>
        <collection property="user" resultMap="mapUser"/>
    </resultMap>

    <select id="findById" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        AND p.id = #{id}
    </select>

    <select id="findAll" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        ORDER BY p.id DESC
    </select>

    <update id="update" flushCache="true"
            parameterType="com.project.childprj.domain.community.Post">
        UPDATE post
        SET title = #{title}, content = #{content}
        WHERE id = #{id}
    </update>

    <delete id="delete" flushCache="true"
            parameterType="com.project.childprj.domain.community.Post">
        DELETE FROM post WHERE id = #{id}
    </delete>

    <!-- 페이징 용 쿼리 -->
    <select id="selectFromRow" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        ORDER BY p.id DESC
        LIMIT #{param1}, #{param2}
    </select>

    <select id="countAll" resultType="int">
        SELECT count(*) FROM post
    </select>

    <!-- 첨부파일 용 쿼리 -->

    <insert id="saveImage" flushCache="true" parameterType="com.project.childprj.domain.community.Attachment">
        INSERT INTO post_img(sourceName, fileName, postId)
        VALUES
        (#{sourceName}, #{fileName}, #{postId})
    </insert>

    <!-- 반복해서 사용될 쿼리문은 sql 태그로 정의 include 태그로 가져다 쓸수 있다 -->
    <sql id="SELECTFILE">
        SELECT id, sourceName, fileName, postId
        FROM post_img
        WHERE 1 = 1
    </sql>

    <select id="findImageByPost" resultType="com.project.childprj.domain.community.Attachment">
        <include refid="SELECTFILE"/>
        AND
        postId = #{param1}
        ORDER BY id ASC
    </select>

    <select id="findImageById" resultType="com.project.childprj.domain.community.Attachment">
        <include refid="SELECTFILE"/>
        AND id = #{id}
    </select>

    <delete id="deleteImage" flushCache="true">
        DELETE FROM post_img WHERE id = #{id}
    </delete>

    <!-- 댓글 용 쿼리 -->

    <resultMap id="mapComment" type="com.project.childprj.domain.community.Comment">
        <result column="c_id" property="id"/>
        <result column="c_content" property="content"/>
        <result column="c_createDate" property="createDate"/>
        <result column="c_postId" property="postId"/>
        <collection property="user" resultMap="mapUser"/>
        <collection property="userImage" resultMap="mapUserImage"/>
    </resultMap>

    <resultMap id="mapUserImage" type="com.project.childprj.domain.mypage.UserImage">
        <result column="i_id" property="id"/>
        <result column="i_fileName" property="fileName"/>
    </resultMap>

    <select id="findCommentByPost" resultMap="mapComment">
        SELECT
        c.id "c_id",
        c.content "c_content",
        c.createDate "c_createDate",
        c.postId "c_postId",
        u.id "u_id",
        u.loginId "u_loginId",
        u.nickName "u_nickName",
        u.name "u_name",
        u.email "u_email",
        u.createDate "u_createDate",
        i.id "i_id",
        i.fileName "i_fileName"
        FROM post_comment c, user u, user_img i
        WHERE
        c.userId = u.id
        AND u.id = i.userId
        AND c.postId = #{postId}
        ORDER BY c.id DESC
    </select>

    <insert id="saveComment" flushCache="true"
            parameterType="com.project.childprj.domain.community.Comment"
            useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO post_comment(userId, postId, content)
        VALUES(#{user.id}, #{postId}, #{content})
    </insert>

    <delete id="deleteCommentById" flushCache="true">
        DELETE FROM post_comment WHERE id = #{id}
    </delete>

</mapper>